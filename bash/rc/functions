#!/usr/bin/env bash

function confirm () # Simple confirmation interaction for CLI
{
    # call with a prompt string or use a default
    read -r -t 5 -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Read secret string
function read_secret() # Read user input as a secret
{
    # Disable echo.
    stty -echo

    # Set up trap to ensure echo is enabled before exiting if the script
    # is terminated while echo is disabled.
    trap 'stty echo' EXIT

    # Read secret.
    read "$@"

    # Enable echo.
    stty echo
    trap - EXIT

    # Print a newline because the newline entered by the user after
    # entering the passcode is not echoed. This ensures that the
    # next line of output begins at a new line.
    echo

}

function notify() # Simple notification wrapper for action/commands
{
    notify_usage() { echo "notify [[-S SuccessStr] [-F FailString] [-A ActionStr]] Action" 1>&2; exit; }

    local OPTIND o S F A
    while getopts ":S:F:A:" o; do
        case "${o}" in
            S) # succes
                SUCCESSstr="${OPTARG}"
                ;;
            F) # fail
                FAILstr="${OPTARG}"
                ;;
            A) # action
                ACTIONstr="${OPTARG}"
                ;;
        esac
    done
    shift $((OPTIND-1))

    # print action string if provided
    if [ ! -z "${ACTIONstr}" ]; then
        printf "${ACTIONstr}"
    fi
    # do action

    if [ "$@" -eq 0 ]; then
        printf "${SUCCESSstr:-Success!}"
    else
        printf "${FAILstr:-Fail!}"
    fi

    return 0
}

function whichTerm() # Display the current terminal
{
    basename "/"$(ps -f -p $(cat /proc/$(echo $$)/stat | cut -d \  -f 4) | tail -1 | sed 's/^.* //')
    return "$?"
}

function ansi-test() # Display ansi color table
{
      for a in 0 1 4 5 7; do
              echo "a=$a "
              for (( f=0; f<=9; f++ )) ; do
                      for (( b=0; b<=9; b++ )) ; do
                              #echo -ne "f=$f b=$b"
                              echo -ne "\\033[${a};3${f};4${b}m"
                              echo -ne "\\\\\\\\033[${a};3${f};4${b}m"
                              echo -ne "\\033[0m "
                      done
              echo
              done
              echo
      done
      echo
}

function setproxy() # Interactively set proxy settings
{
    # setup default values
    defaultproxyhost="webproxy"
    defaultproxyport="9090"
    defaultproxyusername="$USER"

    read -p "Proxy Hostname [$defaultproxyhost]: " -e proxyhost
    : ${proxyhost:=$defaultproxyhost}
    read -p "Proxy Port [$defaultproxyport]: "  -e proxyport
    : ${proxyport:=$defaultproxyport}
    read -p "Proxy username [$defaultproxyusername]: " -e proxyusername
    : ${proxyusername:=$defaultproxyusername}
    if [ -z "$proxyusername" ]
    then
        proxy=https://$proxyhost:$proxyport/
    else
        printf "Password: "
        read_secret proxypassword
        proxy=https://$proxyusername:$proxypassword@$proxyhost:$proxyport/
    fi
    export http_proxy=$proxy
    export https_proxy=$proxy
    export ftp_proxy=$proxy
    echo -e Set the Proxy environment variables for the current session. Logout to reset them to null again..
    echo -e Updating /etc/apt/apt.conf
    sudo sed -i -r 's|^(Acquire::https?::Proxy ")[^"]*(";)|\1'"$proxy"'\2|gm' /etc/apt/apt.conf
}

# Wrapper function for Maven's mvn command.
function mvn-color() # colorize maven output
{
  # Filter mvn output using sed
  mvn $@ | sed -e "s/\(\[INFO\]\ \-.*\)/${BOLD}\1${RESET_FORMATTING}/g" \
               -e "s/\(\[INFO\]\ \[.*\)/${RESET_FORMATTING}${BOLD}\1${RESET_FORMATTING}/g" \
               -e "s/\(\[INFO\]\ BUILD SUCCESSFUL\)/${BOLD}${TEXT_GREEN}\1${RESET_FORMATTING}/g" \
               -e "s/\(\[debug\].*\)/${TEXT_CYAN}\1${RESET_FORMATTING}/g" \
               -e "s/\(\[WARNING\].*\)/${BOLD}${TEXT_YELLOW}\1${RESET_FORMATTING}/g" \
               -e "s/\(\[ERROR\].*\)/${BOLD}${TEXT_RED}\1${RESET_FORMATTING}/g" \
               -e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/${BOLD}${TEXT_GREEN}Tests run: \1${RESET_FORMATTING}, Failures: ${BOLD}${TEXT_RED}\2${RESET_FORMATTING}, Errors: ${BOLD}${TEXT_RED}\3${RESET_FORMATTING}, Skipped: ${BOLD}${TEXT_YELLOW}\4${RESET_FORMATTING}/g"
  MVN_EXIT=${PIPESTATUS[0]}
  # Make sure formatting is reset
  echo -ne ${RESET_FORMATTING}
  return ${MVN_EXT}
}

function mk () # Create a new directory and enter it
{
    mkdir -p "$@" && cd -P "$@"
}

